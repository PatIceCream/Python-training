text: put in "", exacly same as when you write sth
numbers: write directly, python could show numbers or calculate the numbers directly
variables: same as numbers
***different elements seperated by comma and space, space will be add in the result of print directly. so try to avoid use comma and space
argv: list & unpack

to operate file: 
> open() to get a  file object (from file name to file)
>> defferent mode of file open: r / w / a / b
> operate file when get the file object (goes into file)
>>.read, print (xxx.read())
>>.readline, print(xxx.readline())
>>.seek: move the pointer in the file .seek(0,1)
>>.truncate: erase file contect
>>.write: erase and add content xxx.write()
>>.close: save and close
***more opearations on files

functions:
define a function and rerurn a value
when define a function, note:
>function name contains digits, letters and "_" only
>function name followed by ()
>arguments in () should be seperated by ,
>argements should be unique
>the line of def should be end with:
>the second line should indent with 4 spaces
>when end the function, remove indent
when call/use a function, note:
>use the correct function name
>function name followed by ()
>put correct amount of arguments in and seperate by ,



Keywords:
and
if, elif, else
print
try...except...else...finally...
>>> except #all errors will be caught
>>> except (error) as e # put error in a variable
>>> except (error, error2, error3) as e # only one variable can be used
del
pass: null operation
del: delete objects (in python everything is an object, using del to delet variable, list, part of the list....)
is: return True/False 
from
or:
iterable: for example, a list []
gernerator: (a, b, c...), perform iterate only once
yield: provide elements of generator when for... is used
return
exec(): execute a program, which can be put as a string or code object in arg1
for
assert: check a given logic is true or false. program execution proceeds only when Ture and return AssertError when false
with: 2 related oerations to execute in pair with a block of code in between
raise: manually raise an error
as: with .... as...., to name the resources; bind a module to a new name. import ... as...
break: terminate a loop containing break statement
continue: skip the rest of the loop for the current iteration and enter the next
lamba: to create an anonymous function, frequently use as a high-order function(take one or more functions as arguments 
  ans return one or more functions)
?global
?class

Data Type
True/False
None: null value, same as 0, False, empty string, None itself is a Data Type None
string
number
float
list

Escape sequence
\\
\'
\"
\a
\b
\f
\n
\t
\r
\v

String Formats
%d
%r
%s
%i
%o
%u
%x
%X
%e
%E
%f
%F
%g
%G
%c
%%

+ - * ** / // % < > <= >= == **= != <> [] {} @ , : . = ; -= *= //= %=





