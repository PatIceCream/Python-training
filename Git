10th Mar


git as an open source distributed version control system; local or push online.
git handles contents as snapshots, one for each commit, and knows how to apply or roll back the change sets between 
two snapshots


working logic of git
  
>> for one commit
  start from git init
  every change will be shown with git status
  stage the changes to add the change into index
  commmit the staged changes to pernanently record the change
  >>> commit is the main element in git. unique commit ID for each commit (long hashs; abbreviated)
  
>> working with branch
  branch in git is a named pointer to a specific commit
  branching: apply 2 change sets to one snapshot creates a new stream, aka a branch after named
  merging: fast forward merge / no-conflict merge (new commit, all change sets since the diverge) / conflicting merge
  rebase: move the diversion point up
  cherry pick: one commit to put in other branch
  revert: as a new commit
  
  
  
  
  
command of git 



important note about git


Question
if I create something on github, is this automatically recorded by git?
is it possible if some of the changes is not committed?
why do we need HEAD point in git


>>how to fetch sth from online
git clone #clone sth from an online hub with original file and .git
git clone xxxxx yyy #rename
>>how to use git to vc
change (or discard change), shown by run git status but nothing is recorded
-> stage (or unstage change), temporarily record the change 
-->commit, pernanently record the change
by now, you got a modified dir and a permanent record of what have been done (add or delete) 
and it can be push online

git status
git add/rm <file> #to stage
git reset HEAD <file> # to unstage
git check out --<file> # to discard change
git remote -v #show origin
git init
git commit -m "aaaa"
git checkout -b #create and swtich to a new branch
git checkout
git branch
git push
